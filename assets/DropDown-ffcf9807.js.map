{"version":3,"file":"DropDown-ffcf9807.js","sources":["../../src/components/drop-down/DropDown.tsx"],"sourcesContent":["'use client';\nimport { Listbox } from '@headlessui/react';\nimport clsx from 'clsx';\nimport React, { forwardRef, useState } from 'react';\nimport { twMerge } from 'tailwind-merge';\nimport { getDistanceToBottom } from '../../utils/getDistanceToBottom';\nimport { FunctionalIcon } from '../icon/Icon';\nimport { DropDownItem, DropDownProps } from './drop-down.interface';\n\nconst MENU_HEIGHT = 268;\n\nconst getOptionItemClasses = (hovered: boolean, selected) => {\n  return clsx(\n    'zep-flex zep-w-full zep-items-center zep-justify-between zep-bg-background-light zep-px-1 zep-py-0.75',\n    { 'zep-bg-greyscale-200': hovered },\n    { 'zep-bg-greyscale-300': selected },\n    { 'zep-pr-3': selected },\n  );\n};\n\nexport const DropDown: React.FC<DropDownProps> = forwardRef<HTMLElement, DropDownProps>(\n  (\n    {\n      disabled = false,\n      items,\n      message,\n      label,\n      placeholder,\n      required,\n      notRequiredHint = '(optional)',\n      readOnly = false,\n      state = 'default',\n      ...props\n    },\n    ref,\n  ) => {\n    const [selectedValue, setSelectedValue] = useState<DropDownItem | null>(null);\n    const buttonRef = React.useRef<HTMLButtonElement>(null);\n    const hasError = state === 'error';\n    const hasInfo = state === 'info';\n    const disabledOrReadonly = disabled || readOnly;\n    const iconColor = hasError ? 'zep-text-error' : hasInfo ? 'zep-text-info' : '';\n    const onChange = (value) => {\n      props?.onChange && props?.onChange(value);\n      setSelectedValue(value);\n    };\n\n    return (\n      <div\n        className={twMerge(\n          clsx(\n            'zep-relative',\n            'zep-inline-block',\n            'zep-text-left',\n            'zep-w-full',\n            {\n              'zep-cursor-not-allowed zep-opacity-disabled': disabled,\n            },\n            props.className,\n          ),\n        )}\n        data-testid=\"zep-drop-down\"\n      >\n        <Listbox\n          disabled={disabledOrReadonly}\n          {...props}\n          onChange={onChange}\n          value={props?.value || selectedValue}\n          ref={ref}\n        >\n          {({ open }) => {\n            const distanceToBottom = getDistanceToBottom(buttonRef.current);\n            const openOnTop = distanceToBottom < MENU_HEIGHT;\n            const showPlaceholder = readOnly ? undefined : placeholder;\n            const displayValue = props?.value?.name || selectedValue?.name || showPlaceholder;\n            const color = disabled\n              ? 'zep-text-opacity-disabled'\n              : !props?.value?.name && !selectedValue?.name && !readOnly\n              ? 'zep-text-typography-dark-100/70'\n              : 'zep-text-typography-dark-100';\n\n            // input\n            const buttonClasses = clsx(\n              'zep-bg-background-light',\n              'zep-inline-flex',\n              'zep-justify-between',\n              'zep-rounded-4',\n              'zep-border-solid',\n              'zep-pl-1',\n              'zep-pr-0.75',\n              'zep-py-0.75',\n              'zep-font-roboto',\n              'zep-w-full',\n              'zep-outline-none',\n              hasError ? 'zep-border-2 zep-border-error' : 'zep-border-1 zep-border-neutral-dark-default',\n              color,\n              { 'zep-bg-background-medium': readOnly },\n              { 'zep-ring': open },\n              { 'zep-active:zep-ring': !disabledOrReadonly },\n              { 'zep-ring-offset-1': !disabledOrReadonly },\n              { 'focus-visible:zep-ring': !disabledOrReadonly },\n              { 'zep-ring-focus': !disabledOrReadonly },\n              { 'zep-cursor-not-allowed': disabledOrReadonly },\n            );\n\n            const optionContainerClasses = clsx(\n              'zep-absolute',\n              'zep-shadow-sm',\n              'zep-py-0.25',\n              'zep-z-10',\n              'zep-w-full',\n              'zep-max-h-[268px]',\n              'zep-origin-top-right',\n              'zep-rounded-4',\n              'zep-bg-background-light',\n              'focus:zep-outline-none',\n              'zep-overflow-hidden',\n              'zep-overflow-y-auto',\n              openOnTop ? 'zep-mb-[-25px]' : 'zep-mt-0.25',\n              { 'zep-bottom-full': openOnTop },\n            );\n\n            const iconClasses = clsx(\n              disabledOrReadonly ? 'zep-text-opacity-disabled' : 'zep-text-typography-dark-100',\n              'zep-shrink-0',\n              'zep-transition-transform',\n              'zep-duration-300',\n              {\n                'zep-rotate-180': open,\n              },\n            );\n\n            return (\n              <>\n                {label && (\n                  <Listbox.Label\n                    className={clsx('zep-block', 'zep-mb-0.5', {\n                      'zep-text-opacity-disabled': disabled,\n                    })}\n                  >\n                    {label}\n                    {!required && <span className=\"zep-ml-0.25\">{notRequiredHint}</span>}\n                  </Listbox.Label>\n                )}\n\n                <Listbox.Button\n                  className={buttonClasses}\n                  ref={buttonRef}\n                  title={displayValue}\n                  data-testid=\"zep-drop-down-button\"\n                >\n                  <>\n                    <span className=\"zep-truncate\">{displayValue}</span>\n                    <FunctionalIcon className={iconClasses} name=\"chevron-mini-down\" role=\"img\" size={24} />\n                  </>\n                </Listbox.Button>\n                <Listbox.Options className={optionContainerClasses} data-testid=\"zep-drop-down-menu\">\n                  {items.map((item, i) => (\n                    <Listbox.Option\n                      key={item.id}\n                      value={item}\n                      title={item.name}\n                      className={({ active, selected }) => getOptionItemClasses(active, selected)}\n                    >\n                      {({ selected }) => {\n                        return (\n                          <>\n                            <span className=\"zep-truncate\">{item.name}</span>\n                            {selected && (\n                              <FunctionalIcon name=\"check\" role=\"img\" size={24} className=\"zep-absolute zep-right-1\" />\n                            )}\n                          </>\n                        );\n                      }}\n                    </Listbox.Option>\n                  ))}\n                </Listbox.Options>\n              </>\n            );\n          }}\n        </Listbox>\n        {message && (\n          <div\n            className={clsx(\n              'zep-mt-0.25',\n              { 'zep-text-typography-dark-100': !hasError && !hasInfo },\n              'zep-text-0.875',\n              'zep-flex',\n              iconColor,\n            )}\n          >\n            {state !== 'default' && (\n              <FunctionalIcon\n                name={hasError ? 'warning-triangle-filled' : 'info-circle-filled'}\n                role=\"img\"\n                size={24}\n                className=\"zep-mr-0.5 zep-shrink-0\"\n              />\n            )}\n            <span className=\"zep-mt-0.125\">{message}</span>\n          </div>\n        )}\n      </div>\n    );\n  },\n);\n"],"names":["MENU_HEIGHT","getOptionItemClasses","hovered","selected","clsx","DropDown","forwardRef","disabled","items","message","label","placeholder","required","notRequiredHint","readOnly","state","props","ref","selectedValue","setSelectedValue","useState","buttonRef","React","hasError","hasInfo","disabledOrReadonly","iconColor","onChange","value","jsxs","twMerge","jsx","Listbox","open","openOnTop","getDistanceToBottom","showPlaceholder","displayValue","_a","color","_b","buttonClasses","optionContainerClasses","iconClasses","Fragment","FunctionalIcon","item","i","active"],"mappings":"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"}